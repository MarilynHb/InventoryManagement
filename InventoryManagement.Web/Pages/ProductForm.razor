@page "/product/{Id:int?}"
@using InventoryManagement.Shared
@inherits ProductBase
@inject NavigationManager NavigationManager

<div class="card">
    <div class="card-header">
        <h3>@(Id.HasValue ? "Edit" : "Add") Product</h3>
    </div>
    <div class="card-body">
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger">@ErrorMessage</div>
        }
        <EditForm Model="@product" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="code" class="form-label">Code</label>
                <InputText id="code" class="form-control" @bind-Value="product.Code" />
                <ValidationMessage For="@(() => product.Code)" />
            </div>

            <div class="mb-3">
                <label for="name" class="form-label">Name</label>
                <InputText id="name" class="form-control" @bind-Value="product.Name" />
                <ValidationMessage For="@(() => product.Name)" />
            </div>

            <div class="mb-3">
                <label for="quantity" class="form-label">Quantity</label>
                <InputNumber id="quantity" class="form-control" @bind-Value="product.Quantity" />
                <ValidationMessage For="@(() => product.Quantity)" />
            </div>

            <div class="mb-3">
                <label for="price" class="form-label">Price</label>
                <InputNumber id="price" class="form-control" @bind-Value="product.Price" />
                <ValidationMessage For="@(() => product.Price)" />
            </div>

            <div class="d-flex gap-2">
                <button type="submit" class="btn btn-primary" @onclick="HandleValidSubmit">Save</button>
                <button type="button" class="btn btn-secondary" @onclick="NavigateBack">Cancel</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public int? Id { get; set; }

    private ProductDetail product = new() { Code = "", Name = "", Price = 0, Quantity = 0 };

    protected override async Task OnInitializedAsync()
    {
        if (Id.HasValue)
        {
            var result = await ProductService.GetProductAsync(Id.Value);
            if (result.Success && result.Data != null)
            {
                product = result.Data;
            }
            else
            {
                NavigationManager.NavigateTo("/product/0");
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        ServiceResult<ProductDetail> result;
        try
        {
            product.Validate();
            if (Id != 0)
            {
                result = await ProductService.UpdateProductAsync(product);
            }
            else
            {
                result = await ProductService.AddProductAsync(product);
            }
            if (result.Success)
            {
                NavigateBack();
            }
            else
            {
                ErrorMessage = result.ErrorMessage;
            }
        }
        catch(Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/product");
    }
}